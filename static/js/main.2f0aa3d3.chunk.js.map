{"version":3,"sources":["redux/actions.js","redux/reducers.js","components/User.js","components/TodoItemHandler.js","components/TodoItem.js","components/TodoListHandler.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["LOAD","DISPLAY","REMOVE","SORT","load","dispatch","type","Promise","all","fetch","then","response","json","_ref","_ref2","Object","slicedToArray","todos","users","todosList","map","todo","user","find","userId","id","objectSpread","name","email","data","initialState","requested","User","props","react_default","a","createElement","Fragment","TodoItemHandler","connect","state","myProps","title","completed","index","removeTheItem","className","onClick","TodoListHandler","articleRequested","articleData","buttonClicked","sortData","field","components_TodoItemHandler","key","store","createStore","arguments","length","undefined","action","filter","post","dataItems","toConsumableArray","sort","x","y","toString","localeCompare","applyMiddleware","thunk","App","es","components_TodoListHandler","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2f0aa3d3.chunk.js","sourcesContent":["// действия только описывают то, что произошло, но не описывают, как изменяется состояние приложения\r\nexport const LOAD = 'load';\r\nexport const DISPLAY = 'display';\r\nexport const REMOVE = 'remove';\r\nexport const SORT = 'sort';\r\n\r\nexport function load() {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: LOAD\r\n    });\r\n\r\n    Promise.all([\r\n      fetch('https://jsonplaceholder.typicode.com/todos')\r\n        .then(response => response.json()),\r\n      fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n    ])\r\n      .then(([todos, users]) => {\r\n        const todosList = todos.map(todo => {\r\n          const user = users.find(user => todo.userId === user.id);\r\n          return {\r\n            ...todo,\r\n            user,\r\n            name: user.name,\r\n            email: user.email\r\n          }\r\n        });\r\n        dispatch(display(todosList));\r\n      })\r\n  };\r\n\r\n}\r\n\r\nexport function display(data) {\r\n  return {\r\n    type: DISPLAY,\r\n    data\r\n  };\r\n}\r\n\r\nexport function removeTheItem(index) {\r\n  return {\r\n    type: REMOVE,\r\n    index\r\n  }\r\n}\r\n\r\nexport function sortData(field) {\r\n  return {\r\n    type: SORT,\r\n    field\r\n  }\r\n}\r\n","// Редукторы определяют, как изменяется состояние приложения в ответ на действия, отправленные в store\r\nimport { LOAD, DISPLAY, REMOVE, SORT } from './actions';\r\nconst initialState = {\r\n  data: null,\r\n  requested: false\r\n};\r\n\r\nexport function getNextState(state = initialState, action) {\r\n  switch (action.type) {\r\n    case LOAD:\r\n      return {\r\n        ...state,\r\n        requested: true\r\n      };\r\n    case DISPLAY:\r\n      return {\r\n        ...state,\r\n        data: action.data\r\n      }\r\n    case REMOVE:\r\n      return {\r\n        ...state,\r\n        data: state.data.filter((post, index) => index !== action.index)\r\n      }\r\n    case SORT:\r\n      const dataItems = [...state.data];\r\n      dataItems.sort((x, y) => (x[action.field]).toString().localeCompare((y[action.field]).toString()));\r\n      return {\r\n        ...state,\r\n        data: dataItems\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nexport default function User(props) {\r\n  return (\r\n    <React.Fragment>\r\n      {props.user}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import { connect } from 'react-redux';\r\nimport { removeTheItem } from '../redux/actions';\r\nimport TodoItem from './TodoItem';\r\n\r\nfunction mapStateToProps(state, myProps) {\r\n    return {\r\n        title: myProps.todo.title,\r\n        user: myProps.todo.name,\r\n        email: myProps.todo.email,\r\n        completed: myProps.todo.completed,\r\n        index: myProps.index\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        removeTheItem: (index) => dispatch(removeTheItem(index))\r\n    }\r\n}\r\n\r\nconst TodoItemHandler = connect(mapStateToProps, mapDispatchToProps)(TodoItem);\r\nexport default TodoItemHandler;\r\n","import React from 'react';\r\nimport User from './User';\r\n\r\nexport default function TodoItem(props) {\r\n    return (\r\n      <tr className={props.completed ? 'completed' : 'uncompleted'}>\r\n        <td>{props.title}</td>\r\n        <td><User user={props.user} /></td>\r\n        <td>{props.email}</td>\r\n        <td>{props.completed ? 'completed' : 'uncompleted'}</td>\r\n        <td className=\"delete\" onClick={() => props.removeTheItem(props.index)}>&times;</td>\r\n      </tr>\r\n    );\r\n  }\r\n","import TodoList from \"./TodoList\";\r\nimport { connect } from 'react-redux';\r\nimport { load,sortData } from '../redux/actions';\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    articleRequested: state.requested,\r\n    articleData: state.data\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    buttonClicked: () => dispatch(load()),\r\n    sortData: (field) => dispatch(sortData(field))\r\n  };\r\n}\r\n\r\nconst TodoListHandler = connect(mapStateToProps, mapDispatchToProps)(TodoList);\r\n\r\nexport default TodoListHandler;\r\n","import React from 'react';\r\nimport TodoItemHandler from './TodoItemHandler';\r\n\r\nexport default function TodoList(props) {\r\n  if (!props.articleRequested) {\r\n    return <button onClick={props.buttonClicked} className='requestingButton'>Load data</button>\r\n  }\r\n  if (props.articleData === null) {\r\n    return <button className='requestingButton'>Loading<br />...</button>\r\n  }\r\n  return (\r\n    <table className='listOfTodos'>\r\n      <thead>\r\n        <tr>\r\n          <th onClick={() => props.sortData('title')}>Title</th>\r\n          <th onClick={() => props.sortData('name')}>User</th>\r\n          <th onClick={() => props.sortData('email')}>Email</th>\r\n          <th onClick={() => props.sortData('completed')}>Status</th>\r\n          <th></th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {props.articleData.map((todo, index) => <TodoItemHandler todo={todo} index={index} key={todo.id} />)}\r\n      </tbody>\r\n    </table>\r\n  );\r\n\r\n}\r\n","import React from 'react';\nimport {createStore, applyMiddleware} from 'redux';\nimport { Provider } from 'react-redux';\nimport { getNextState } from './redux/reducers';\nimport TodoListHandler from './components/TodoListHandler';\nimport thunk from 'redux-thunk';\nimport './App.css';\n\nconst store = createStore(getNextState, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <TodoListHandler />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}